name: Deploy backend to server
on:
  push:
    branches:
      - main
    paths:
      - "api/**"
      - ".github/workflows/backend.yml"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      APP_NAME: backend-${GITHUB_REPOSITORY##*/}
    steps:
      - name: Checkout api
        uses: actions/checkout@v4
        with:
          sparse-checkout: api
          sparse-checkout-cone-mode: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: cd api && npm install --frozen-lockfile

      - name: Build app
        run: cd api && npm run build

      - name: Create container file structure
        run: |
          mkdir -p \
            container/dev \
            container/etc/systemd/system \
            container/opt/app \
            container/proc \
            container/run \
            container/sys \
            container/tmp \
            container/usr/lib \
            container/var/lib/services/${APP_NAME} \
            container/var/tmp
          touch \
            container/etc/machine-id \
            container/etc/resolv.conf
          cat <<EOF > container/usr/lib/os-release
          NAME="Ubuntu"
          VERSION="22.04"
          ID=ubuntu
          ID_LIKE=debian
          PRETTY_NAME="Ubuntu 22.04 LTS"
          VERSION_ID="22.04"
          EOF
          cat <<EOF > container/etc/passwd
          node:x:1000:1000:Node.js User:/home/node:/bin/bash
          EOF

      - name: Cache chisel
        id: cache-chisel
        uses: actions/cache@v4
        with:
          path: |
            container/lib
            container/lib64
            container/usr
          key: chisel-${{ runner.os }}-${{ runner.arch }}

      - if: ${{ steps.cache-chisel.outputs.cache-hit != 'true' }}
        name: Download chisel
        run: |
          curl -fsSL https://github.com/canonical/chisel/releases/download/v0.9.0/chisel_v0.9.0_linux_amd64.tar.gz -O \
          && tar -xzf chisel_v0.9.0_linux_amd64.tar.gz
      - if: ${{ steps.cache-chisel.outputs.cache-hit != 'true' }}
        name: Copy slices into container
        run: ./chisel cut --release ubuntu-22.04 --root container libstdc++6_libs

      - name: Copy Node.js binary into container
        run: cp $(which node) container/opt

      - name: Copy app into container
        run: cp -r api/{dist,package.json,package-lock.json} container/opt/app

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Copy curl binary into container
        run: cp $(which curl) container/usr/bin

      - name: Install production dependencies (Linux x64, glibc)
        run: cd container/opt/app && npm ci --omit=dev --platform=linux --arch=x64 --loglevel verbose

      - name: Create .service file for app
        run: |
          cat <<-EOF > container/etc/systemd/system/${APP_NAME}.service
          [Unit]
          Description=${APP_NAME}
          StartLimitBurst=5
          StartLimitIntervalSec=60
          [Service]
          DynamicUser=yes
          StateDirectory=services/${APP_NAME}
          Environment=PORT=3000 SHUTDOWN_TIMEOUT=5
          Environment=HOME=/opt/app
          Environment=DATABASE_URL=${{ secrets.DATABASE_URL }}
          Environment=JWT_SECRET=${{ secrets.JWT_SECRET }}
          Environment=NODE_ENV=production
          ExecStart=/opt/node /opt/app/dist/src/index.js
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Compress container
        run: |
          mksquashfs \
            container \
            "${APP_NAME}_$(date --utc '+%F.%H%M')".raw \
            -exit-on-error \
            -all-root \
            -quiet
      - uses: actions/upload-artifact@v4
        with:
          name: container
          path: "*.raw"
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Retrieve container
        uses: actions/download-artifact@v4
        with:
          name: container
      - name: Write SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Upload container to server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/portables/${{ github.repository }}"
          scp "${APP_NAME}_"*.raw \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/portables/${{ github.repository }}/
      - name: Attach container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'BASH'
          set -e
          declare -r GITHUB_REPOSITORY='${{ github.repository }}'
          declare -r APP_NAME='backend-${GITHUB_REPOSITORY##*/}'
          cd ~/portables/${GITHUB_REPOSITORY}
          if ! command -v portablectl &> /dev/null; then
            echo "### ERROR: portablectl is not installed" >&2 ; exit 10
          fi
          shopt -s nullglob
          declare -a images=("${APP_NAME}"_*.raw)
          declare -i n=${#images[@]}
          if (( n == 0 )); then
            echo "### ERROR: No images were found" >&2 ; exit 10
          fi
          sudo portablectl attach --profile=trusted --enable --now "./${images[-1]}" || \
          sudo portablectl reattach --profile=trusted --enable --now "./${images[-1]}" || {
            echo "### ERROR: Failed to attach or reattach image" >&2 ; exit 10
          }
          if (( n > 2 )); then
            for (( i=0; i<n-2; i++ )); do
              rm "${images[$i]}"
            done
          fi
          BASH
      - name: Delete .ssh directory
        run: rm -rf ~/.ssh
